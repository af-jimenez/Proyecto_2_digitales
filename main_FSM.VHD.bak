LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;
USE work.my_pkg.ALL;
----------------------------------------
ENTITY main_FSM IS
	PORT	(	clk				:	IN	STD_LOGIC;
				rst				:	IN	STD_LOGIC;
				ena				:	IN	STD_LOGIC;
				str_btn			:	IN	STD_LOGIC;
				col_izq			:	IN	STD_LOGIC;
				col_der			:	IN	STD_LOGIC;
				max_izq			:	IN	STD_LOGIC;
				max_der			:	IN	STD_LOGIC;
				tick_timer_1s	:	IN	STD_LOGIC;
				tick_timer_3s	:	IN	STD_LOGIC;
				tick_timer_g	:	IN	STD_LOGIC;
				tick_timer_w	:	IN	STD_LOGIC;
				timer_ena_3s	:	OUT	STD_LOGIC;
				timer_ena_g		:	OUT	STD_LOGIC;
				timer_ena_w		:	OUT	STD_LOGIC;
				rst_game		:	OUT	STD_LOGIC;
				wr_en			:	OUT	STD_LOGIC;
				w_addr_j		:	OUT	STD_LOGIC_VECTOR( 3 DOWNTO 0 );
				w_addr_i		:	OUT	STD_LOGIC_VECTOR( 2 DOWNTO 0 );
				w_data			:	OUT	STD_LOGIC);
END ENTITY;
----------------------------------------
ARCHITECTURE arch OF main_FSM IS
	
	SIGNAL	anim_imgs	:	imgs_mtx( 0 TO 3 );

	TYPE state IS (st0, st1, st2, st3, st4, st5, st6);
	SIGNAL pr_state, nx_state	:	state;
	
BEGIN
	
	anim_imgs(0)	<= (	conv_slv("0000000000000000"),
							conv_slv("0111011101110111"),
							conv_slv("0001010101010101"),
							conv_slv("0111010101010101"),
							conv_slv("0101010101010111"),
							conv_slv("0101010101010001"),
							conv_slv("0111010101110001"),
							conv_slv("0000000000000000"));
	
	anim_imgs(1)	<= (	conv_slv("0000000000000000"),
							conv_slv("0001011101110111"),
							conv_slv("0001010101010001"),
							conv_slv("0001011101010111"),
							conv_slv("0001010101010101"),
							conv_slv("0001010101010101"),
							conv_slv("0111010101110111"),
							conv_slv("0000000000000000"));
	
	anim_imgs(2)	<= (	conv_slv("0000000000000000"),
							conv_slv("0001000000111100"),
							conv_slv("0001100000100100"),
							conv_slv("0001010000100100"),
							conv_slv("0001000000111100"),
							conv_slv("0001000000000100"),
							conv_slv("0011100000000100"),
							conv_slv("0000000000000000"));
	
	anim_imgs(3)	<= (	conv_slv("0000000000000000"),
							conv_slv("0011100000111100"),
							conv_slv("0010000000100100"),
							conv_slv("0011100000100100"),
							conv_slv("0000100000111100"),
							conv_slv("0000100000000100"),
							conv_slv("0011100000000100"),
							conv_slv("0000000000000000"));
	
	-------------------------------------------------------------
	--                 LOWER SECTION OF FSM                    --
	-------------------------------------------------------------
	sequential: PROCESS(rst, ini_st, clk)
	BEGIN
		IF (rst = '1') THEN
			pr_state	<=	st0;
		ELSIF (rising_edge(clk)) THEN
			pr_state	<=	nx_state;
		END IF;
	END PROCESS sequential;
	
	-------------------------------------------------------------
	--                 UPPER SECTION OF FSM                    --
	-------------------------------------------------------------
	combinational: PROCESS(str_btn, col_der, col_izq, max_der, max_izq, tick_timer_3s, tick_timer_1s, tick_timer_g, tick_timer_w)
	BEGIN
		CASE pr_state IS
			WHEN st0	=>
			
				pong_print:	ENTITY work.imageManagement
				PORT MAP(clk      =>	clk,
						rst      =>	rst,
						ena      =>	ena,
						imageIn	=>	anim_imgs(0),
						wr_en		=>	wr_en,
						w_addr_j	=>	w_addr_j,
						w_addr_i	=>	w_addr_i,
						w_data	=>	w_data);
					
				timer_ena_3s	<=	'0';
				timer_ena_g		<=	'0';
				timer_ena_w		<=	'0';
				rst_game		<=	'1';
					
				IF (str_btn = '1') THEN
					nx_state	<= st1;
				ELSE
					nx_state	<= st0;
				END IF;
			WHEN st1	=>
				
				timer_ena_3s	<=	'1';
				timer_ena_g		<=	'0';
				timer_ena_w		<=	'0';
				rst_game		<=	'1';
				
				conteo_fsm: ENTITY work.countdown_FSM
				PORT MAP(clk     		=>	clk,
						rst      		=>	rst,
						ena      		=>	ena,
						tick_timer_1s	=>	tick_timer_1s,
						wr_en			=>	wr_en,
						w_addr_j		=>	w_addr_j,
						w_addr_i		=>	w_addr_i,
						w_data			=>	w_data);
				
				IF (tick_timer_3s = '1') THEN
					nx_state	<= st2;
				ELSE
					nx_state	<= st1;
				END IF;
			WHEN st2	=>
				
				timer_ena_3s	<=	'0';
				timer_ena_g		<=	'0';
				timer_ena_w		<=	'0';
				rst_game		<=	'0';
				
				IF (col_der = '1') THEN
					nx_state	<= st3;	
				ELSIF (col_izq = '1') THEN
					nx_state	<= st5;
				ELSE
					nx_state	<= st2;
				END IF;
				
			WHEN st3	=>
				
				g1_print:	ENTITY work.imageManagement
				PORT MAP(clk      =>	clk,
						rst      =>	rst,
						ena      =>	ena,
						imageIn	=>	anim_imgs(1),
						wr_en		=>	wr_en,
						w_addr_j	=>	w_addr_j,
						w_addr_i	=>	w_addr_i,
						w_data	=>	w_data);
				
				timer_ena_3s	<=	'0';
				timer_ena_g		<=	'1';
				timer_ena_w		<=	'0';
				rst_game		<=	'1';
					
				IF (max_der = '1') THEN
					nx_state	<= st4;
				ELSIF (tick_timer_g = '1') THEN
					nx_state	<= st2;
				ELSE
					nx_state	<= st3;
				END IF;
				
			WHEN st4	=>
				
				w1_print:	ENTITY work.imageManagement
				PORT MAP(clk      =>	clk,
						rst      =>	rst,
						ena      =>	ena,
						imageIn	=>	anim_imgs(2),
						wr_en		=>	wr_en,
						w_addr_j	=>	w_addr_j,
						w_addr_i	=>	w_addr_i,
						w_data	=>	w_data);
					
				timer_ena_3s	<=	'0';
				timer_ena_g		<=	'0';
				timer_ena_w		<=	'1';
				rst_game		<=	'1';
					
				IF (tick_timer_w = '1') THEN
					nx_state	<= st0;
				ELSE
					nx_state	<= st4;
				END IF;
				
			WHEN st5	=>
				
				g2_print:	ENTITY work.imageManagement
				PORT MAP(clk      =>	clk,
						rst      =>	rst,
						ena      =>	ena,
						imageIn	=>	anim_imgs(1),
						wr_en		=>	wr_en,
						w_addr_j	=>	w_addr_j,
						w_addr_i	=>	w_addr_i,
						w_data	=>	w_data);
				
				timer_ena_3s	<=	'0';
				timer_ena_g		<=	'1';
				timer_ena_w		<=	'0';
				rst_game		<=	'1';
					
				IF (max_izq = '1') THEN
					nx_state	<= st6;
				ELSIF (tick_timer_g = '1') THEN
					nx_state	<= st2;
				ELSE
					nx_state	<= st5;
				END IF;
			
			WHEN st6	=>
				
				w2_print:	ENTITY work.imageManagement
				PORT MAP(clk      =>	clk,
						rst      =>	rst,
						ena      =>	ena,
						imageIn	=>	anim_imgs(3),
						wr_en		=>	wr_en,
						w_addr_j	=>	w_addr_j,
						w_addr_i	=>	w_addr_i,
						w_data	=>	w_data);
					
				timer_ena_3s	<=	'0';
				timer_ena_g		<=	'0';
				timer_ena_w		<=	'1';
				rst_game		<=	'1';
					
				IF (tick_timer_w = '1') THEN
					nx_state	<= st0;
				ELSE
					nx_state	<= st4;
				END IF;
				
		END CASE;
	END PROCESS combinational;
END ARCHITECTURE;